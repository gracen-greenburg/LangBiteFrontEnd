package com.model;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 * FreeformConversation
 * 
 * This class handles a freeform conversation with the user in French using OpenAI's API.
 * The AI uses a restricted vocabulary loaded from CurrentWords.json, and if it uses words
 * outside of this vocabulary, it provides translations for them.
 */
public class FreeformConversation {

    private static final String OPENAI_API_KEY = "sk-uibot-SDERjvxOED1qa9a4YpQsT3BlbkFJB7ocCfsZJ3aIKeg69fo4"; // Replace with your actual API key
    private static final String OPENAI_API_URL = "https://api.openai.com/v1/chat/completions";
    private static final String WORD_BANK_FILE = "LangBite\\.vscode\\CurrentWords.json";

    private List<String> wordBank;

    public FreeformConversation() {
        wordBank = loadWordBank();
    }

    /**
     * Loads the word bank from CurrentWords.json
     */
    private List<String> loadWordBank() {
        List<String> words = new ArrayList<>();
        JSONParser parser = new JSONParser();

        try (FileReader reader = new FileReader(WORD_BANK_FILE)) {
            JSONArray wordsArray = (JSONArray) parser.parse(reader);
            for (Object obj : wordsArray) {
                JSONObject wordJSON = (JSONObject) obj;
                String frenchWord = (String) wordJSON.get("french");
                words.add(frenchWord.toLowerCase());
            }
        } catch (IOException | ParseException e) {
            e.printStackTrace();
        }
        return words;
    }

    /**
     * Starts the conversation with the AI.
     */
    public void startConversation() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("AI: Bonjour ! Parlons en français. I will send you a message in French and then will send the message again in English. However, I will not translate your vocab words. Type 'exit' to stop.");

        // AI initiates the conversation
        String initialMessage = "Bonjour ! Comment s'est passée votre journée ?";
        String aiResponse = getAIResponse(initialMessage);
        System.out.println("AI: " + aiResponse);

        while (true) {
            System.out.print("Vous: ");
            String userInput = scanner.nextLine();

            if (userInput.equalsIgnoreCase("exit")) {
                System.out.println("AI: Au revoir !");
                break;
            }

            // Generate AI response using OpenAI API
            aiResponse = getAIResponse(userInput);
            System.out.println("AI: " + aiResponse);
        }

        scanner.close();
    }

    /**
     * Sends a message to OpenAI's API to generate a response, prioritizing words from the word bank.
     * If words outside the word bank are used, it includes English translations.
     * 
     * @param userMessage The message from the user
     * @return The response generated by the AI
     */
    private String getAIResponse(String userMessage) {
        try {
            // Construct JSON payload
            String jsonPayload = generateRequestJson(userMessage);
            URL url = new URL(OPENAI_API_URL);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            
            // Configure connection properties
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Authorization", "Bearer " + OPENAI_API_KEY);
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setDoOutput(true);

            // Send the request payload
            try (DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream())) {
                outputStream.write(jsonPayload.getBytes(StandardCharsets.UTF_8));
                outputStream.flush();
            }

            // Read the response
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                    StringBuilder response = new StringBuilder();
                    String line;
                    while ((line = reader.readLine()) != null) {
                        response.append(line);
                    }
                    return parseAIResponse(response.toString());
                }
            } else {
                System.err.println("API request failed with response code: " + responseCode);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return "Désolé, je n'ai pas pu générer une réponse.";
    }

    /**
     * Generates a JSON payload for the OpenAI API request.
     * 
     * @param userMessage The message from the user
     * @return The JSON payload as a string
     */
    private String generateRequestJson(String userMessage) {
        return String.format("""
                {
                    "model": "gpt-4",
                    "messages": [
                        {"role": "system", "content": "You are a conversational AI helping a user practice French. You should prioritize using the following French words: %s. If you need to use a word not in this list, provide the English translation for that word in parentheses after the word. Underneath your French message, please include a copy of your message but with all of the words that are not in the word bank in English. For example: If the words 'jour' and 'travail' are on the list and your message is 'Est-ce-que votre jour de travail ete bien?' you would then also print 'Was your jour at travail good?'. your role is to have a conversation with the user. do not simpy repeat what they say back to them. Do not include special characters."},
                        {"role": "user", "content": "%s"}
                    ],
                    "temperature": 0.5
                }
                """, String.join(", ", wordBank), userMessage);
    }

    /**
     * Parses the response from OpenAI's API to extract the generated message.
     * 
     * @param responseBody The raw JSON response from OpenAI
     * @return The AI's response message
     */
    private String parseAIResponse(String responseBody) {
        try {
            JSONParser parser = new JSONParser();
            JSONObject jsonObject = (JSONObject) parser.parse(responseBody);
            JSONArray choices = (JSONArray) jsonObject.get("choices");
            JSONObject message = (JSONObject) ((JSONObject) choices.get(0)).get("message");
            return (String) message.get("content");
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return "Désolé, je n'ai pas pu interpréter la réponse.";
    }

    public static void main(String[] args) {
        FreeformConversation conversation = new FreeformConversation();
        conversation.startConversation();
    }
}
